import streamlit as st
import os
import time
import re
import numpy as np
import pandas as pd 
import subprocess
import matplotlib.pyplot as plt
import sys
sys.path.append('sub_code/')  # Add the directory containing 'NEDO_user_code.py' to the Python path
import NEDO_user_code


# Set page title and icon
st.set_page_config(
    page_title="Piste de r√©flexions",
    page_icon="üî¨",
)

# Main title
st.title("üî¨ Piste de r√©flexions")

# Create a sidebar for navigation
page = st.sidebar.radio("Aller √†", ["NEDOS", "Latent ODE", "Normalizing Flow"])

# Define the content for each page
if page == "NEDOS":
    st.markdown("<h1 style='text-align: center; color: white;'>Neural ODEs", unsafe_allow_html=True)

    st.write(r"""En guise de preuve de concept, nous allons maintenant tester si un ODE neuronal peut effectivement restaurer la vraie fonction de dynamique √† l'aide de donn√©es √©chantillonn√©es. Pour ce faire, nous sp√©cifierons un ODE, le ferons √©voluer et √©chantillonnerons des points sur sa trajectoire, puis le restaurerons. 
         Tout d'abord, nous testerons un ODE lin√©aire simple. 
         La dynamique est donn√©e la matrice ci dessous matrice.
$$
\frac{dz}{dt} = \begin{bmatrix}-0.1 & -1.0\\1.0 & -0.1\end{bmatrix} z
$$

Pour l'impl√©mentation, nous utiliserons un module de r√©seau de neurones lin√©aires avec une couche d'entr√©e de dimension 2 
et une couche de sortie de dimension 2, sans biais (```nn.Linear(2, 2, bias=False)```).
         """)

    
    # Function to read PNG files corresponding to each iteration
    def read_png_files(folder_path):
        png_files = sorted([f for f in os.listdir(folder_path) if f.endswith('.png')], key=sort_key)
        return png_files

    # Custom sorting function to sort filenames based on their numeric part
    def sort_key(filename):
        return int(re.search(r'\d+', filename).group())

    # Graph plot function
    def plot_graph_1():
        st.title('Evolution du r√©sultat')

        # Start button to initiate the animation
        if st.button("Commencer l'animation", key="start_animation"):
            # Select folder containing PNG files
            folder_path = "data/dim2.1"
            st.empty()  # Placeholder for the slider

            # Check if folder path is provided
            if folder_path:
                # Read PNG files from the folder
                png_files = read_png_files(folder_path)

                # Placeholder for the selected image
                selected_image_placeholder = st.empty()

                # Progress through the iterations automatically
                for i in range(len(png_files) * 10):  # Progress through each step of 10
                    time.sleep(0.01)  # Adjust the speed of progression
                    iteration = i // 10 * 10  # Get the current iteration

                    # Display the selected PNG file
                    selected_png = os.path.join(folder_path, png_files[iteration // 10])
                    selected_image_placeholder.image(selected_png, use_column_width=True)

                # Button to restart the progress
                restart_button = st.button("Recommencer l'animation", key="restart_button")
                if restart_button:
                    start_progress = True  # Set the flag to start progress again
                
    def create_matrix():
        st.title("√Ä votre tour !")
        st.write(r"""Essayez de r√©soudre votre √©quation diff√©rentielle dans $\mathbb{R}^{2}$ avec un NODE. 
             Nous restons dans le cadre d'une √©quation diff√©rencielle *lin√©aire* pour simplifier le mod√®le.""")
        st.write(r"""C'est √† dire un probl√®me de la forme 
             $$\frac{dz}{dt} = Az$$ avec $A \in \mathcal{M}_{2}(\mathbb{R})$.""")


        st.write(r"""Commencez par entrer votre matrice $A$.""")

        matrix = np.zeros((2,2))
        index_list = [[0,0], [0,1], [1,0], [1,1]]
        value_00 = float(st.number_input(f"Ligne 1, Colonne 1", key = "00"))
        matrix[0,0] = value_00
        value_01 = float(st.number_input(f"Ligne 1, Colonne 2", key = "01"))
        matrix[0,1] = value_01
        value_10 = float(st.number_input(f"Ligne 2, Colonne 1", key = "10"))
        matrix[1,0] = value_10
        value_11 = float(st.number_input(f"Ligne 2, Colonne 2", key = "11"))
        matrix[1,1] = value_11
        return matrix

    def show_matrix(matrix):
        st.write("Votre matrice A en input")
        matrix_given = matrix
        # Center the plot
        col1, col2 = st.columns([1, 2])
        with col2:
            st.write(matrix, key="show")
        
    def check_conditions(A):
        st.write("Il est commode de v√©rifier les conditions de stabilit√© de la matrice en input pour un meilleur r√©sultat num√©rique.")
        st.markdown("[Rappels sur la r√©solution des EDOs](http://exo7.emath.fr/cours/ch_sysdiff.pdf)")
        # Stability: Check if real parts of eigenvalues are negative
        eigenvalues, _ = np.linalg.eig(A)
        is_stable = np.all(np.real(eigenvalues) < 0)
        if is_stable:
            st.write("Les parties r√©elles des valeurs propres sont n√©gatives. ‚úÖ")
        else:
            st.write("Les parties r√©elles des valeurs propres sont positives. ‚ùå")

        # Non-degeneracy: Check if matrix is non-singular
        is_nonsingular = np.linalg.det(A) != 0
        if is_nonsingular:
            st.write("La matrice est non d√©g√©n√©r√©e. ‚úÖ")
        else:
            st.write("La matrice est d√©g√©n√©r√©e. ‚ùå")

        # Real Eigenvalues: Check if eigenvalues are real
        is_real_eigenvalues = np.all(np.imag(eigenvalues) == 0)
        if is_real_eigenvalues:
            st.write("Les valeurs propres de la matrice sont r√©elles. ‚úÖ")
        else:
            st.write("Les valeurs propres de la matrice ne sont pas r√©elles. ‚úÖ")

    def choose_parameters():
        st.write(r""" Le point clef de la m√©thoden NODE est qu'il repose sur la m√©thode de l'adjoint pour calculer $\nabla_{\theta}L$. 
                 Ceci implique donc directement l'utilisation d'une fonction $L$ diff√©rentiable, ou au moins d√©rivable. 
                 Pour appliquer la m√©thode NODE, vous avez le choix entre plusieurs fonctions de loss ainsi que le choix du nombre d'it√©rations.
                 Nous recommandons au moins 500 it√©rations.
                 """)

        # Define loss function choices with keys
        loss_function_choices = {
            "Mean Squared Error (MSE)": "mse",
            "Mean Absolute Error (MAE)": "mae",
            "Huber Loss (HL)": "huber",
            "Log-Cosh Loss (LGL)": "log_cosh"
        }

        # Prompt the user to choose a loss function
        loss_function_choice = st.selectbox(
            "Choose a loss function:",
            options=list(loss_function_choices.keys()),
            key="loss_function_choice"
        )

        # Get the key corresponding to the selected loss function
        selected_key = loss_function_choices[loss_function_choice]

        # Prompt the user to enter the number of iterations
        iterations = st.number_input("Enter the number of iterations:", min_value=1, step=1)

        # Return the chosen loss function key and number of iterations
        return selected_key, iterations
    
    
    def try_code(matrix, loss_function_key, iterations):
        # Button to run the code
        if st.button("Essayer le code soit m√™me", key = "code"):
            # Execute the code
            #try:                
            NEDO_user_code.main(loss_function_key, matrix, iterations)
                 
            #except Exception as e:
            #    # Display any errors that occur during execution
            #    st.error(f"Error: {e}")

    def main():
        start_progress = False 
        plot_graph_1()
        matrix = create_matrix()
        show_matrix(matrix)
        check_conditions(matrix)
        loss_function_key, iterations = choose_parameters()
        st.write("Chosen Loss Function Key:", loss_function_key)
        st.write("Number of Iterations:", iterations)
        iterations = int(iterations)
        try_code(matrix, loss_function_key, iterations)
        
    if __name__ == '__main__':
        main()

elif page == "Latent ODE":
    
    st.write("This is the content of Latent 0DE")
    
    
elif page == "Normalizing Flow":
    
    st.write("This is the content of Normalizing Flow")
